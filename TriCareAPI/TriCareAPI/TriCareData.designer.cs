#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TriCareAPI
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="tcare")]
	public partial class TriCareDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertRefillQuantity(RefillQuantity instance);
    partial void UpdateRefillQuantity(RefillQuantity instance);
    partial void DeleteRefillQuantity(RefillQuantity instance);
    partial void InsertIngredient(Ingredient instance);
    partial void UpdateIngredient(Ingredient instance);
    partial void DeleteIngredient(Ingredient instance);
    partial void InsertInsuranceCarrier(InsuranceCarrier instance);
    partial void UpdateInsuranceCarrier(InsuranceCarrier instance);
    partial void DeleteInsuranceCarrier(InsuranceCarrier instance);
    partial void InsertMedicine(Medicine instance);
    partial void UpdateMedicine(Medicine instance);
    partial void DeleteMedicine(Medicine instance);
    partial void InsertMedicineIngredient(MedicineIngredient instance);
    partial void UpdateMedicineIngredient(MedicineIngredient instance);
    partial void DeleteMedicineIngredient(MedicineIngredient instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPresciptionRefill(PresciptionRefill instance);
    partial void UpdatePresciptionRefill(PresciptionRefill instance);
    partial void DeletePresciptionRefill(PresciptionRefill instance);
    partial void InsertPrescriber(Prescriber instance);
    partial void UpdatePrescriber(Prescriber instance);
    partial void DeletePrescriber(Prescriber instance);
    partial void InsertPrescription(Prescription instance);
    partial void UpdatePrescription(Prescription instance);
    partial void DeletePrescription(Prescription instance);
    partial void InsertPrescriptionMedicine(PrescriptionMedicine instance);
    partial void UpdatePrescriptionMedicine(PrescriptionMedicine instance);
    partial void DeletePrescriptionMedicine(PrescriptionMedicine instance);
    partial void InsertPrescriptionMedicineIngredient(PrescriptionMedicineIngredient instance);
    partial void UpdatePrescriptionMedicineIngredient(PrescriptionMedicineIngredient instance);
    partial void DeletePrescriptionMedicineIngredient(PrescriptionMedicineIngredient instance);
    partial void InsertRefillAmount(RefillAmount instance);
    partial void UpdateRefillAmount(RefillAmount instance);
    partial void DeleteRefillAmount(RefillAmount instance);
    #endregion
		
		public TriCareDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["tcareConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TriCareDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TriCareDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TriCareDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TriCareDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<RefillQuantity> RefillQuantities
		{
			get
			{
				return this.GetTable<RefillQuantity>();
			}
		}
		
		public System.Data.Linq.Table<Ingredient> Ingredients
		{
			get
			{
				return this.GetTable<Ingredient>();
			}
		}
		
		public System.Data.Linq.Table<InsuranceCarrier> InsuranceCarriers
		{
			get
			{
				return this.GetTable<InsuranceCarrier>();
			}
		}
		
		public System.Data.Linq.Table<Medicine> Medicines
		{
			get
			{
				return this.GetTable<Medicine>();
			}
		}
		
		public System.Data.Linq.Table<MedicineIngredient> MedicineIngredients
		{
			get
			{
				return this.GetTable<MedicineIngredient>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<PresciptionRefill> PresciptionRefills
		{
			get
			{
				return this.GetTable<PresciptionRefill>();
			}
		}
		
		public System.Data.Linq.Table<Prescriber> Prescribers
		{
			get
			{
				return this.GetTable<Prescriber>();
			}
		}
		
		public System.Data.Linq.Table<Prescription> Prescriptions
		{
			get
			{
				return this.GetTable<Prescription>();
			}
		}
		
		public System.Data.Linq.Table<PrescriptionMedicine> PrescriptionMedicines
		{
			get
			{
				return this.GetTable<PrescriptionMedicine>();
			}
		}
		
		public System.Data.Linq.Table<PrescriptionMedicineIngredient> PrescriptionMedicineIngredients
		{
			get
			{
				return this.GetTable<PrescriptionMedicineIngredient>();
			}
		}
		
		public System.Data.Linq.Table<RefillAmount> RefillAmounts
		{
			get
			{
				return this.GetTable<RefillAmount>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountId;
		
		private EntitySet<Prescriber> _Prescribers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    #endregion
		
		public Account()
		{
			this._Prescribers = new EntitySet<Prescriber>(new Action<Prescriber>(this.attach_Prescribers), new Action<Prescriber>(this.detach_Prescribers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Prescriber", Storage="_Prescribers", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<Prescriber> Prescribers
		{
			get
			{
				return this._Prescribers;
			}
			set
			{
				this._Prescribers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prescribers(Prescriber entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Prescribers(Prescriber entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RefillQuantity")]
	public partial class RefillQuantity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RefillQuantityId;
		
		private int _Quantity;
		
		private EntitySet<PresciptionRefill> _PresciptionRefills;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRefillQuantityIdChanging(int value);
    partial void OnRefillQuantityIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public RefillQuantity()
		{
			this._PresciptionRefills = new EntitySet<PresciptionRefill>(new Action<PresciptionRefill>(this.attach_PresciptionRefills), new Action<PresciptionRefill>(this.detach_PresciptionRefills));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefillQuantityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RefillQuantityId
		{
			get
			{
				return this._RefillQuantityId;
			}
			set
			{
				if ((this._RefillQuantityId != value))
				{
					this.OnRefillQuantityIdChanging(value);
					this.SendPropertyChanging();
					this._RefillQuantityId = value;
					this.SendPropertyChanged("RefillQuantityId");
					this.OnRefillQuantityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RefillQuantity_PresciptionRefill", Storage="_PresciptionRefills", ThisKey="RefillQuantityId", OtherKey="RefillQuantityId")]
		public EntitySet<PresciptionRefill> PresciptionRefills
		{
			get
			{
				return this._PresciptionRefills;
			}
			set
			{
				this._PresciptionRefills.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PresciptionRefills(PresciptionRefill entity)
		{
			this.SendPropertyChanging();
			entity.RefillQuantity = this;
		}
		
		private void detach_PresciptionRefills(PresciptionRefill entity)
		{
			this.SendPropertyChanging();
			entity.RefillQuantity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ingredient")]
	public partial class Ingredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IngredientId;
		
		private string _Name;
		
		private EntitySet<MedicineIngredient> _MedicineIngredients;
		
		private EntitySet<PrescriptionMedicineIngredient> _PrescriptionMedicineIngredients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIngredientIdChanging(int value);
    partial void OnIngredientIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Ingredient()
		{
			this._MedicineIngredients = new EntitySet<MedicineIngredient>(new Action<MedicineIngredient>(this.attach_MedicineIngredients), new Action<MedicineIngredient>(this.detach_MedicineIngredients));
			this._PrescriptionMedicineIngredients = new EntitySet<PrescriptionMedicineIngredient>(new Action<PrescriptionMedicineIngredient>(this.attach_PrescriptionMedicineIngredients), new Action<PrescriptionMedicineIngredient>(this.detach_PrescriptionMedicineIngredients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IngredientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IngredientId
		{
			get
			{
				return this._IngredientId;
			}
			set
			{
				if ((this._IngredientId != value))
				{
					this.OnIngredientIdChanging(value);
					this.SendPropertyChanging();
					this._IngredientId = value;
					this.SendPropertyChanged("IngredientId");
					this.OnIngredientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_MedicineIngredient", Storage="_MedicineIngredients", ThisKey="IngredientId", OtherKey="IngredientId")]
		public EntitySet<MedicineIngredient> MedicineIngredients
		{
			get
			{
				return this._MedicineIngredients;
			}
			set
			{
				this._MedicineIngredients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_PrescriptionMedicineIngredient", Storage="_PrescriptionMedicineIngredients", ThisKey="IngredientId", OtherKey="IngredientId")]
		public EntitySet<PrescriptionMedicineIngredient> PrescriptionMedicineIngredients
		{
			get
			{
				return this._PrescriptionMedicineIngredients;
			}
			set
			{
				this._PrescriptionMedicineIngredients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicineIngredients(MedicineIngredient entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = this;
		}
		
		private void detach_MedicineIngredients(MedicineIngredient entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = null;
		}
		
		private void attach_PrescriptionMedicineIngredients(PrescriptionMedicineIngredient entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = this;
		}
		
		private void detach_PrescriptionMedicineIngredients(PrescriptionMedicineIngredient entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InsuranceCarrier")]
	public partial class InsuranceCarrier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InsuranceCarrierId;
		
		private string _Name;
		
		private EntitySet<Patient> _Patients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInsuranceCarrierIdChanging(int value);
    partial void OnInsuranceCarrierIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public InsuranceCarrier()
		{
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceCarrierId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InsuranceCarrierId
		{
			get
			{
				return this._InsuranceCarrierId;
			}
			set
			{
				if ((this._InsuranceCarrierId != value))
				{
					this.OnInsuranceCarrierIdChanging(value);
					this.SendPropertyChanging();
					this._InsuranceCarrierId = value;
					this.SendPropertyChanged("InsuranceCarrierId");
					this.OnInsuranceCarrierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InsuranceCarrier_Patient", Storage="_Patients", ThisKey="InsuranceCarrierId", OtherKey="InsuranceCarrierId")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceCarrier = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceCarrier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medicine")]
	public partial class Medicine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MedicineId;
		
		private string _Name;
		
		private EntitySet<MedicineIngredient> _MedicineIngredients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicineIdChanging(int value);
    partial void OnMedicineIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Medicine()
		{
			this._MedicineIngredients = new EntitySet<MedicineIngredient>(new Action<MedicineIngredient>(this.attach_MedicineIngredients), new Action<MedicineIngredient>(this.detach_MedicineIngredients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MedicineId
		{
			get
			{
				return this._MedicineId;
			}
			set
			{
				if ((this._MedicineId != value))
				{
					this.OnMedicineIdChanging(value);
					this.SendPropertyChanging();
					this._MedicineId = value;
					this.SendPropertyChanged("MedicineId");
					this.OnMedicineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_MedicineIngredient", Storage="_MedicineIngredients", ThisKey="MedicineId", OtherKey="MedicineId")]
		public EntitySet<MedicineIngredient> MedicineIngredients
		{
			get
			{
				return this._MedicineIngredients;
			}
			set
			{
				this._MedicineIngredients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicineIngredients(MedicineIngredient entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = this;
		}
		
		private void detach_MedicineIngredients(MedicineIngredient entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicineIngredient")]
	public partial class MedicineIngredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MedicineIngredientId;
		
		private int _MedicineId;
		
		private int _IngredientId;
		
		private double _Percentage;
		
		private EntityRef<Ingredient> _Ingredient;
		
		private EntityRef<Medicine> _Medicine;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicineIngredientIdChanging(int value);
    partial void OnMedicineIngredientIdChanged();
    partial void OnMedicineIdChanging(int value);
    partial void OnMedicineIdChanged();
    partial void OnIngredientIdChanging(int value);
    partial void OnIngredientIdChanged();
    partial void OnPercentageChanging(double value);
    partial void OnPercentageChanged();
    #endregion
		
		public MedicineIngredient()
		{
			this._Ingredient = default(EntityRef<Ingredient>);
			this._Medicine = default(EntityRef<Medicine>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineIngredientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MedicineIngredientId
		{
			get
			{
				return this._MedicineIngredientId;
			}
			set
			{
				if ((this._MedicineIngredientId != value))
				{
					this.OnMedicineIngredientIdChanging(value);
					this.SendPropertyChanging();
					this._MedicineIngredientId = value;
					this.SendPropertyChanged("MedicineIngredientId");
					this.OnMedicineIngredientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineId", DbType="Int NOT NULL")]
		public int MedicineId
		{
			get
			{
				return this._MedicineId;
			}
			set
			{
				if ((this._MedicineId != value))
				{
					if (this._Medicine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicineIdChanging(value);
					this.SendPropertyChanging();
					this._MedicineId = value;
					this.SendPropertyChanged("MedicineId");
					this.OnMedicineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IngredientId", DbType="Int NOT NULL")]
		public int IngredientId
		{
			get
			{
				return this._IngredientId;
			}
			set
			{
				if ((this._IngredientId != value))
				{
					if (this._Ingredient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIngredientIdChanging(value);
					this.SendPropertyChanging();
					this._IngredientId = value;
					this.SendPropertyChanged("IngredientId");
					this.OnIngredientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Percentage", DbType="Float NOT NULL")]
		public double Percentage
		{
			get
			{
				return this._Percentage;
			}
			set
			{
				if ((this._Percentage != value))
				{
					this.OnPercentageChanging(value);
					this.SendPropertyChanging();
					this._Percentage = value;
					this.SendPropertyChanged("Percentage");
					this.OnPercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_MedicineIngredient", Storage="_Ingredient", ThisKey="IngredientId", OtherKey="IngredientId", IsForeignKey=true)]
		public Ingredient Ingredient
		{
			get
			{
				return this._Ingredient.Entity;
			}
			set
			{
				Ingredient previousValue = this._Ingredient.Entity;
				if (((previousValue != value) 
							|| (this._Ingredient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredient.Entity = null;
						previousValue.MedicineIngredients.Remove(this);
					}
					this._Ingredient.Entity = value;
					if ((value != null))
					{
						value.MedicineIngredients.Add(this);
						this._IngredientId = value.IngredientId;
					}
					else
					{
						this._IngredientId = default(int);
					}
					this.SendPropertyChanged("Ingredient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_MedicineIngredient", Storage="_Medicine", ThisKey="MedicineId", OtherKey="MedicineId", IsForeignKey=true)]
		public Medicine Medicine
		{
			get
			{
				return this._Medicine.Entity;
			}
			set
			{
				Medicine previousValue = this._Medicine.Entity;
				if (((previousValue != value) 
							|| (this._Medicine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medicine.Entity = null;
						previousValue.MedicineIngredients.Remove(this);
					}
					this._Medicine.Entity = value;
					if ((value != null))
					{
						value.MedicineIngredients.Add(this);
						this._MedicineId = value.MedicineId;
					}
					else
					{
						this._MedicineId = default(int);
					}
					this.SendPropertyChanged("Medicine");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientId;
		
		private int _PrescriberId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private char _Gender;
		
		private System.DateTime _BirthDate;
		
		private int _SSN;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private int _Zip;
		
		private int _Phone;
		
		private string _Email;
		
		private string _Allergies;
		
		private string _Diagnosis;
		
		private int _InsuranceCarrierId;
		
		private string _InsuranceCarrierIdNumber;
		
		private string _InsuranceGroupNumber;
		
		private string _RxBin;
		
		private string _RxPcn;
		
		private string _InsurancePhone;
		
		private string _PaymentType;
		
		private EntitySet<Prescription> _Prescriptions;
		
		private EntityRef<InsuranceCarrier> _InsuranceCarrier;
		
		private EntityRef<Prescriber> _Prescriber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnPrescriberIdChanging(int value);
    partial void OnPrescriberIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnGenderChanging(char value);
    partial void OnGenderChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnSSNChanging(int value);
    partial void OnSSNChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(int value);
    partial void OnZipChanged();
    partial void OnPhoneChanging(int value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAllergiesChanging(string value);
    partial void OnAllergiesChanged();
    partial void OnDiagnosisChanging(string value);
    partial void OnDiagnosisChanged();
    partial void OnInsuranceCarrierIdChanging(int value);
    partial void OnInsuranceCarrierIdChanged();
    partial void OnInsuranceCarrierIdNumberChanging(string value);
    partial void OnInsuranceCarrierIdNumberChanged();
    partial void OnInsuranceGroupNumberChanging(string value);
    partial void OnInsuranceGroupNumberChanged();
    partial void OnRxBinChanging(string value);
    partial void OnRxBinChanged();
    partial void OnRxPcnChanging(string value);
    partial void OnRxPcnChanged();
    partial void OnInsurancePhoneChanging(string value);
    partial void OnInsurancePhoneChanged();
    partial void OnPaymentTypeChanging(string value);
    partial void OnPaymentTypeChanged();
    #endregion
		
		public Patient()
		{
			this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
			this._InsuranceCarrier = default(EntityRef<InsuranceCarrier>);
			this._Prescriber = default(EntityRef<Prescriber>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriberId", DbType="Int NOT NULL")]
		public int PrescriberId
		{
			get
			{
				return this._PrescriberId;
			}
			set
			{
				if ((this._PrescriberId != value))
				{
					if (this._Prescriber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrescriberIdChanging(value);
					this.SendPropertyChanging();
					this._PrescriberId = value;
					this.SendPropertyChanged("PrescriberId");
					this.OnPrescriberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NChar(1) NOT NULL")]
		public char Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSN", DbType="Int NOT NULL")]
		public int SSN
		{
			get
			{
				return this._SSN;
			}
			set
			{
				if ((this._SSN != value))
				{
					this.OnSSNChanging(value);
					this.SendPropertyChanging();
					this._SSN = value;
					this.SendPropertyChanged("SSN");
					this.OnSSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="Int NOT NULL")]
		public int Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Int NOT NULL")]
		public int Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allergies", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Allergies
		{
			get
			{
				return this._Allergies;
			}
			set
			{
				if ((this._Allergies != value))
				{
					this.OnAllergiesChanging(value);
					this.SendPropertyChanging();
					this._Allergies = value;
					this.SendPropertyChanged("Allergies");
					this.OnAllergiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diagnosis", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Diagnosis
		{
			get
			{
				return this._Diagnosis;
			}
			set
			{
				if ((this._Diagnosis != value))
				{
					this.OnDiagnosisChanging(value);
					this.SendPropertyChanging();
					this._Diagnosis = value;
					this.SendPropertyChanged("Diagnosis");
					this.OnDiagnosisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceCarrierId", DbType="Int NOT NULL")]
		public int InsuranceCarrierId
		{
			get
			{
				return this._InsuranceCarrierId;
			}
			set
			{
				if ((this._InsuranceCarrierId != value))
				{
					if (this._InsuranceCarrier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuranceCarrierIdChanging(value);
					this.SendPropertyChanging();
					this._InsuranceCarrierId = value;
					this.SendPropertyChanged("InsuranceCarrierId");
					this.OnInsuranceCarrierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceCarrierIdNumber", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string InsuranceCarrierIdNumber
		{
			get
			{
				return this._InsuranceCarrierIdNumber;
			}
			set
			{
				if ((this._InsuranceCarrierIdNumber != value))
				{
					this.OnInsuranceCarrierIdNumberChanging(value);
					this.SendPropertyChanging();
					this._InsuranceCarrierIdNumber = value;
					this.SendPropertyChanged("InsuranceCarrierIdNumber");
					this.OnInsuranceCarrierIdNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceGroupNumber", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string InsuranceGroupNumber
		{
			get
			{
				return this._InsuranceGroupNumber;
			}
			set
			{
				if ((this._InsuranceGroupNumber != value))
				{
					this.OnInsuranceGroupNumberChanging(value);
					this.SendPropertyChanging();
					this._InsuranceGroupNumber = value;
					this.SendPropertyChanged("InsuranceGroupNumber");
					this.OnInsuranceGroupNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RxBin", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RxBin
		{
			get
			{
				return this._RxBin;
			}
			set
			{
				if ((this._RxBin != value))
				{
					this.OnRxBinChanging(value);
					this.SendPropertyChanging();
					this._RxBin = value;
					this.SendPropertyChanged("RxBin");
					this.OnRxBinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RxPcn", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RxPcn
		{
			get
			{
				return this._RxPcn;
			}
			set
			{
				if ((this._RxPcn != value))
				{
					this.OnRxPcnChanging(value);
					this.SendPropertyChanging();
					this._RxPcn = value;
					this.SendPropertyChanged("RxPcn");
					this.OnRxPcnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsurancePhone", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string InsurancePhone
		{
			get
			{
				return this._InsurancePhone;
			}
			set
			{
				if ((this._InsurancePhone != value))
				{
					this.OnInsurancePhoneChanging(value);
					this.SendPropertyChanging();
					this._InsurancePhone = value;
					this.SendPropertyChanged("InsurancePhone");
					this.OnInsurancePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentType", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string PaymentType
		{
			get
			{
				return this._PaymentType;
			}
			set
			{
				if ((this._PaymentType != value))
				{
					this.OnPaymentTypeChanging(value);
					this.SendPropertyChanging();
					this._PaymentType = value;
					this.SendPropertyChanged("PaymentType");
					this.OnPaymentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Prescription", Storage="_Prescriptions", ThisKey="PatientId", OtherKey="PatientId")]
		public EntitySet<Prescription> Prescriptions
		{
			get
			{
				return this._Prescriptions;
			}
			set
			{
				this._Prescriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InsuranceCarrier_Patient", Storage="_InsuranceCarrier", ThisKey="InsuranceCarrierId", OtherKey="InsuranceCarrierId", IsForeignKey=true)]
		public InsuranceCarrier InsuranceCarrier
		{
			get
			{
				return this._InsuranceCarrier.Entity;
			}
			set
			{
				InsuranceCarrier previousValue = this._InsuranceCarrier.Entity;
				if (((previousValue != value) 
							|| (this._InsuranceCarrier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InsuranceCarrier.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._InsuranceCarrier.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._InsuranceCarrierId = value.InsuranceCarrierId;
					}
					else
					{
						this._InsuranceCarrierId = default(int);
					}
					this.SendPropertyChanged("InsuranceCarrier");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescriber_Patient", Storage="_Prescriber", ThisKey="PrescriberId", OtherKey="PrescriberId", IsForeignKey=true)]
		public Prescriber Prescriber
		{
			get
			{
				return this._Prescriber.Entity;
			}
			set
			{
				Prescriber previousValue = this._Prescriber.Entity;
				if (((previousValue != value) 
							|| (this._Prescriber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prescriber.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._Prescriber.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._PrescriberId = value.PrescriberId;
					}
					else
					{
						this._PrescriberId = default(int);
					}
					this.SendPropertyChanged("Prescriber");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PresciptionRefill")]
	public partial class PresciptionRefill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrescriptionRefillId;
		
		private int _PrescriptionId;
		
		private int _RefillQuantityId;
		
		private int _RefillAmountId;
		
		private EntityRef<RefillQuantity> _RefillQuantity;
		
		private EntityRef<Prescription> _Prescription;
		
		private EntityRef<RefillAmount> _RefillAmount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrescriptionRefillIdChanging(int value);
    partial void OnPrescriptionRefillIdChanged();
    partial void OnPrescriptionIdChanging(int value);
    partial void OnPrescriptionIdChanged();
    partial void OnRefillQuantityIdChanging(int value);
    partial void OnRefillQuantityIdChanged();
    partial void OnRefillAmountIdChanging(int value);
    partial void OnRefillAmountIdChanged();
    #endregion
		
		public PresciptionRefill()
		{
			this._RefillQuantity = default(EntityRef<RefillQuantity>);
			this._Prescription = default(EntityRef<Prescription>);
			this._RefillAmount = default(EntityRef<RefillAmount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionRefillId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PrescriptionRefillId
		{
			get
			{
				return this._PrescriptionRefillId;
			}
			set
			{
				if ((this._PrescriptionRefillId != value))
				{
					this.OnPrescriptionRefillIdChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionRefillId = value;
					this.SendPropertyChanged("PrescriptionRefillId");
					this.OnPrescriptionRefillIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionId", DbType="Int NOT NULL")]
		public int PrescriptionId
		{
			get
			{
				return this._PrescriptionId;
			}
			set
			{
				if ((this._PrescriptionId != value))
				{
					if (this._Prescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionId = value;
					this.SendPropertyChanged("PrescriptionId");
					this.OnPrescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefillQuantityId", DbType="Int NOT NULL")]
		public int RefillQuantityId
		{
			get
			{
				return this._RefillQuantityId;
			}
			set
			{
				if ((this._RefillQuantityId != value))
				{
					if (this._RefillQuantity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRefillQuantityIdChanging(value);
					this.SendPropertyChanging();
					this._RefillQuantityId = value;
					this.SendPropertyChanged("RefillQuantityId");
					this.OnRefillQuantityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefillAmountId", DbType="Int NOT NULL")]
		public int RefillAmountId
		{
			get
			{
				return this._RefillAmountId;
			}
			set
			{
				if ((this._RefillAmountId != value))
				{
					if (this._RefillAmount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRefillAmountIdChanging(value);
					this.SendPropertyChanging();
					this._RefillAmountId = value;
					this.SendPropertyChanged("RefillAmountId");
					this.OnRefillAmountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RefillQuantity_PresciptionRefill", Storage="_RefillQuantity", ThisKey="RefillQuantityId", OtherKey="RefillQuantityId", IsForeignKey=true)]
		public RefillQuantity RefillQuantity
		{
			get
			{
				return this._RefillQuantity.Entity;
			}
			set
			{
				RefillQuantity previousValue = this._RefillQuantity.Entity;
				if (((previousValue != value) 
							|| (this._RefillQuantity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefillQuantity.Entity = null;
						previousValue.PresciptionRefills.Remove(this);
					}
					this._RefillQuantity.Entity = value;
					if ((value != null))
					{
						value.PresciptionRefills.Add(this);
						this._RefillQuantityId = value.RefillQuantityId;
					}
					else
					{
						this._RefillQuantityId = default(int);
					}
					this.SendPropertyChanged("RefillQuantity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_PresciptionRefill", Storage="_Prescription", ThisKey="PrescriptionId", OtherKey="PrescriptionId", IsForeignKey=true)]
		public Prescription Prescription
		{
			get
			{
				return this._Prescription.Entity;
			}
			set
			{
				Prescription previousValue = this._Prescription.Entity;
				if (((previousValue != value) 
							|| (this._Prescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prescription.Entity = null;
						previousValue.PresciptionRefills.Remove(this);
					}
					this._Prescription.Entity = value;
					if ((value != null))
					{
						value.PresciptionRefills.Add(this);
						this._PrescriptionId = value.PrescriptionId;
					}
					else
					{
						this._PrescriptionId = default(int);
					}
					this.SendPropertyChanged("Prescription");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RefillAmount_PresciptionRefill", Storage="_RefillAmount", ThisKey="RefillAmountId", OtherKey="RefillAmountId", IsForeignKey=true)]
		public RefillAmount RefillAmount
		{
			get
			{
				return this._RefillAmount.Entity;
			}
			set
			{
				RefillAmount previousValue = this._RefillAmount.Entity;
				if (((previousValue != value) 
							|| (this._RefillAmount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefillAmount.Entity = null;
						previousValue.PresciptionRefills.Remove(this);
					}
					this._RefillAmount.Entity = value;
					if ((value != null))
					{
						value.PresciptionRefills.Add(this);
						this._RefillAmountId = value.RefillAmountId;
					}
					else
					{
						this._RefillAmountId = default(int);
					}
					this.SendPropertyChanged("RefillAmount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prescriber")]
	public partial class Prescriber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrescriberId;
		
		private int _AccountId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _NpiNumber;
		
		private string _LicenseNumber;
		
		private string _DeaNumber;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private int _Zip;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _Password;
		
		private EntitySet<Patient> _Patients;
		
		private EntitySet<Prescription> _Prescriptions;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrescriberIdChanging(int value);
    partial void OnPrescriberIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnNpiNumberChanging(string value);
    partial void OnNpiNumberChanged();
    partial void OnLicenseNumberChanging(string value);
    partial void OnLicenseNumberChanged();
    partial void OnDeaNumberChanging(string value);
    partial void OnDeaNumberChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(int value);
    partial void OnZipChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Prescriber()
		{
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriberId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PrescriberId
		{
			get
			{
				return this._PrescriberId;
			}
			set
			{
				if ((this._PrescriberId != value))
				{
					this.OnPrescriberIdChanging(value);
					this.SendPropertyChanging();
					this._PrescriberId = value;
					this.SendPropertyChanged("PrescriberId");
					this.OnPrescriberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NpiNumber", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string NpiNumber
		{
			get
			{
				return this._NpiNumber;
			}
			set
			{
				if ((this._NpiNumber != value))
				{
					this.OnNpiNumberChanging(value);
					this.SendPropertyChanging();
					this._NpiNumber = value;
					this.SendPropertyChanged("NpiNumber");
					this.OnNpiNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseNumber", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LicenseNumber
		{
			get
			{
				return this._LicenseNumber;
			}
			set
			{
				if ((this._LicenseNumber != value))
				{
					this.OnLicenseNumberChanging(value);
					this.SendPropertyChanging();
					this._LicenseNumber = value;
					this.SendPropertyChanged("LicenseNumber");
					this.OnLicenseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeaNumber", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DeaNumber
		{
			get
			{
				return this._DeaNumber;
			}
			set
			{
				if ((this._DeaNumber != value))
				{
					this.OnDeaNumberChanging(value);
					this.SendPropertyChanging();
					this._DeaNumber = value;
					this.SendPropertyChanged("DeaNumber");
					this.OnDeaNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="Int NOT NULL")]
		public int Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescriber_Patient", Storage="_Patients", ThisKey="PrescriberId", OtherKey="PrescriberId")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescriber_Prescription", Storage="_Prescriptions", ThisKey="PrescriberId", OtherKey="PrescriberId")]
		public EntitySet<Prescription> Prescriptions
		{
			get
			{
				return this._Prescriptions;
			}
			set
			{
				this._Prescriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Prescriber", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Prescribers.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Prescribers.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Prescriber = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Prescriber = null;
		}
		
		private void attach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Prescriber = this;
		}
		
		private void detach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Prescriber = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prescription")]
	public partial class Prescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrescriptionId;
		
		private int _PrescriberId;
		
		private int _PatientId;
		
		private System.DateTime _Created;
		
		private EntitySet<PresciptionRefill> _PresciptionRefills;
		
		private EntitySet<PrescriptionMedicine> _PrescriptionMedicines;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Prescriber> _Prescriber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrescriptionIdChanging(int value);
    partial void OnPrescriptionIdChanged();
    partial void OnPrescriberIdChanging(int value);
    partial void OnPrescriberIdChanged();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
		
		public Prescription()
		{
			this._PresciptionRefills = new EntitySet<PresciptionRefill>(new Action<PresciptionRefill>(this.attach_PresciptionRefills), new Action<PresciptionRefill>(this.detach_PresciptionRefills));
			this._PrescriptionMedicines = new EntitySet<PrescriptionMedicine>(new Action<PrescriptionMedicine>(this.attach_PrescriptionMedicines), new Action<PrescriptionMedicine>(this.detach_PrescriptionMedicines));
			this._Patient = default(EntityRef<Patient>);
			this._Prescriber = default(EntityRef<Prescriber>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PrescriptionId
		{
			get
			{
				return this._PrescriptionId;
			}
			set
			{
				if ((this._PrescriptionId != value))
				{
					this.OnPrescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionId = value;
					this.SendPropertyChanged("PrescriptionId");
					this.OnPrescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriberId", DbType="Int NOT NULL")]
		public int PrescriberId
		{
			get
			{
				return this._PrescriberId;
			}
			set
			{
				if ((this._PrescriberId != value))
				{
					if (this._Prescriber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrescriberIdChanging(value);
					this.SendPropertyChanging();
					this._PrescriberId = value;
					this.SendPropertyChanged("PrescriberId");
					this.OnPrescriberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int NOT NULL")]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime2 NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_PresciptionRefill", Storage="_PresciptionRefills", ThisKey="PrescriptionId", OtherKey="PrescriptionId")]
		public EntitySet<PresciptionRefill> PresciptionRefills
		{
			get
			{
				return this._PresciptionRefills;
			}
			set
			{
				this._PresciptionRefills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_PrescriptionMedicine", Storage="_PrescriptionMedicines", ThisKey="PrescriptionId", OtherKey="PrescriptionId")]
		public EntitySet<PrescriptionMedicine> PrescriptionMedicines
		{
			get
			{
				return this._PrescriptionMedicines;
			}
			set
			{
				this._PrescriptionMedicines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Prescription", Storage="_Patient", ThisKey="PatientId", OtherKey="PatientId", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Prescriptions.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Prescriptions.Add(this);
						this._PatientId = value.PatientId;
					}
					else
					{
						this._PatientId = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescriber_Prescription", Storage="_Prescriber", ThisKey="PrescriberId", OtherKey="PrescriberId", IsForeignKey=true)]
		public Prescriber Prescriber
		{
			get
			{
				return this._Prescriber.Entity;
			}
			set
			{
				Prescriber previousValue = this._Prescriber.Entity;
				if (((previousValue != value) 
							|| (this._Prescriber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prescriber.Entity = null;
						previousValue.Prescriptions.Remove(this);
					}
					this._Prescriber.Entity = value;
					if ((value != null))
					{
						value.Prescriptions.Add(this);
						this._PrescriberId = value.PrescriberId;
					}
					else
					{
						this._PrescriberId = default(int);
					}
					this.SendPropertyChanged("Prescriber");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PresciptionRefills(PresciptionRefill entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = this;
		}
		
		private void detach_PresciptionRefills(PresciptionRefill entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = null;
		}
		
		private void attach_PrescriptionMedicines(PrescriptionMedicine entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = this;
		}
		
		private void detach_PrescriptionMedicines(PrescriptionMedicine entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrescriptionMedicine")]
	public partial class PrescriptionMedicine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrescriptionMedicineId;
		
		private int _MedicineId;
		
		private int _PrescriptionId;
		
		private EntitySet<PrescriptionMedicineIngredient> _PrescriptionMedicineIngredients;
		
		private EntityRef<Prescription> _Prescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrescriptionMedicineIdChanging(int value);
    partial void OnPrescriptionMedicineIdChanged();
    partial void OnMedicineIdChanging(int value);
    partial void OnMedicineIdChanged();
    partial void OnPrescriptionIdChanging(int value);
    partial void OnPrescriptionIdChanged();
    #endregion
		
		public PrescriptionMedicine()
		{
			this._PrescriptionMedicineIngredients = new EntitySet<PrescriptionMedicineIngredient>(new Action<PrescriptionMedicineIngredient>(this.attach_PrescriptionMedicineIngredients), new Action<PrescriptionMedicineIngredient>(this.detach_PrescriptionMedicineIngredients));
			this._Prescription = default(EntityRef<Prescription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionMedicineId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PrescriptionMedicineId
		{
			get
			{
				return this._PrescriptionMedicineId;
			}
			set
			{
				if ((this._PrescriptionMedicineId != value))
				{
					this.OnPrescriptionMedicineIdChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionMedicineId = value;
					this.SendPropertyChanged("PrescriptionMedicineId");
					this.OnPrescriptionMedicineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineId", DbType="Int NOT NULL")]
		public int MedicineId
		{
			get
			{
				return this._MedicineId;
			}
			set
			{
				if ((this._MedicineId != value))
				{
					this.OnMedicineIdChanging(value);
					this.SendPropertyChanging();
					this._MedicineId = value;
					this.SendPropertyChanged("MedicineId");
					this.OnMedicineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionId", DbType="Int NOT NULL")]
		public int PrescriptionId
		{
			get
			{
				return this._PrescriptionId;
			}
			set
			{
				if ((this._PrescriptionId != value))
				{
					if (this._Prescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionId = value;
					this.SendPropertyChanged("PrescriptionId");
					this.OnPrescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrescriptionMedicine_PrescriptionMedicineIngredient", Storage="_PrescriptionMedicineIngredients", ThisKey="PrescriptionMedicineId", OtherKey="PrescriptionMedicineId")]
		public EntitySet<PrescriptionMedicineIngredient> PrescriptionMedicineIngredients
		{
			get
			{
				return this._PrescriptionMedicineIngredients;
			}
			set
			{
				this._PrescriptionMedicineIngredients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_PrescriptionMedicine", Storage="_Prescription", ThisKey="PrescriptionId", OtherKey="PrescriptionId", IsForeignKey=true)]
		public Prescription Prescription
		{
			get
			{
				return this._Prescription.Entity;
			}
			set
			{
				Prescription previousValue = this._Prescription.Entity;
				if (((previousValue != value) 
							|| (this._Prescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prescription.Entity = null;
						previousValue.PrescriptionMedicines.Remove(this);
					}
					this._Prescription.Entity = value;
					if ((value != null))
					{
						value.PrescriptionMedicines.Add(this);
						this._PrescriptionId = value.PrescriptionId;
					}
					else
					{
						this._PrescriptionId = default(int);
					}
					this.SendPropertyChanged("Prescription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrescriptionMedicineIngredients(PrescriptionMedicineIngredient entity)
		{
			this.SendPropertyChanging();
			entity.PrescriptionMedicine = this;
		}
		
		private void detach_PrescriptionMedicineIngredients(PrescriptionMedicineIngredient entity)
		{
			this.SendPropertyChanging();
			entity.PrescriptionMedicine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrescriptionMedicineIngredient")]
	public partial class PrescriptionMedicineIngredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrescriptionMedicineIngredientId;
		
		private int _IngredientId;
		
		private int _PrescriptionMedicineId;
		
		private double _Percentage;
		
		private EntityRef<Ingredient> _Ingredient;
		
		private EntityRef<PrescriptionMedicine> _PrescriptionMedicine;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrescriptionMedicineIngredientIdChanging(int value);
    partial void OnPrescriptionMedicineIngredientIdChanged();
    partial void OnIngredientIdChanging(int value);
    partial void OnIngredientIdChanged();
    partial void OnPrescriptionMedicineIdChanging(int value);
    partial void OnPrescriptionMedicineIdChanged();
    partial void OnPercentageChanging(double value);
    partial void OnPercentageChanged();
    #endregion
		
		public PrescriptionMedicineIngredient()
		{
			this._Ingredient = default(EntityRef<Ingredient>);
			this._PrescriptionMedicine = default(EntityRef<PrescriptionMedicine>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionMedicineIngredientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PrescriptionMedicineIngredientId
		{
			get
			{
				return this._PrescriptionMedicineIngredientId;
			}
			set
			{
				if ((this._PrescriptionMedicineIngredientId != value))
				{
					this.OnPrescriptionMedicineIngredientIdChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionMedicineIngredientId = value;
					this.SendPropertyChanged("PrescriptionMedicineIngredientId");
					this.OnPrescriptionMedicineIngredientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IngredientId", DbType="Int NOT NULL")]
		public int IngredientId
		{
			get
			{
				return this._IngredientId;
			}
			set
			{
				if ((this._IngredientId != value))
				{
					if (this._Ingredient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIngredientIdChanging(value);
					this.SendPropertyChanging();
					this._IngredientId = value;
					this.SendPropertyChanged("IngredientId");
					this.OnIngredientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionMedicineId", DbType="Int NOT NULL")]
		public int PrescriptionMedicineId
		{
			get
			{
				return this._PrescriptionMedicineId;
			}
			set
			{
				if ((this._PrescriptionMedicineId != value))
				{
					if (this._PrescriptionMedicine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrescriptionMedicineIdChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionMedicineId = value;
					this.SendPropertyChanged("PrescriptionMedicineId");
					this.OnPrescriptionMedicineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Percentage", DbType="Float NOT NULL")]
		public double Percentage
		{
			get
			{
				return this._Percentage;
			}
			set
			{
				if ((this._Percentage != value))
				{
					this.OnPercentageChanging(value);
					this.SendPropertyChanging();
					this._Percentage = value;
					this.SendPropertyChanged("Percentage");
					this.OnPercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_PrescriptionMedicineIngredient", Storage="_Ingredient", ThisKey="IngredientId", OtherKey="IngredientId", IsForeignKey=true)]
		public Ingredient Ingredient
		{
			get
			{
				return this._Ingredient.Entity;
			}
			set
			{
				Ingredient previousValue = this._Ingredient.Entity;
				if (((previousValue != value) 
							|| (this._Ingredient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredient.Entity = null;
						previousValue.PrescriptionMedicineIngredients.Remove(this);
					}
					this._Ingredient.Entity = value;
					if ((value != null))
					{
						value.PrescriptionMedicineIngredients.Add(this);
						this._IngredientId = value.IngredientId;
					}
					else
					{
						this._IngredientId = default(int);
					}
					this.SendPropertyChanged("Ingredient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrescriptionMedicine_PrescriptionMedicineIngredient", Storage="_PrescriptionMedicine", ThisKey="PrescriptionMedicineId", OtherKey="PrescriptionMedicineId", IsForeignKey=true)]
		public PrescriptionMedicine PrescriptionMedicine
		{
			get
			{
				return this._PrescriptionMedicine.Entity;
			}
			set
			{
				PrescriptionMedicine previousValue = this._PrescriptionMedicine.Entity;
				if (((previousValue != value) 
							|| (this._PrescriptionMedicine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrescriptionMedicine.Entity = null;
						previousValue.PrescriptionMedicineIngredients.Remove(this);
					}
					this._PrescriptionMedicine.Entity = value;
					if ((value != null))
					{
						value.PrescriptionMedicineIngredients.Add(this);
						this._PrescriptionMedicineId = value.PrescriptionMedicineId;
					}
					else
					{
						this._PrescriptionMedicineId = default(int);
					}
					this.SendPropertyChanged("PrescriptionMedicine");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RefillAmount")]
	public partial class RefillAmount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RefillAmountId;
		
		private int _Amount;
		
		private EntitySet<PresciptionRefill> _PresciptionRefills;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRefillAmountIdChanging(int value);
    partial void OnRefillAmountIdChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    #endregion
		
		public RefillAmount()
		{
			this._PresciptionRefills = new EntitySet<PresciptionRefill>(new Action<PresciptionRefill>(this.attach_PresciptionRefills), new Action<PresciptionRefill>(this.detach_PresciptionRefills));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefillAmountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RefillAmountId
		{
			get
			{
				return this._RefillAmountId;
			}
			set
			{
				if ((this._RefillAmountId != value))
				{
					this.OnRefillAmountIdChanging(value);
					this.SendPropertyChanging();
					this._RefillAmountId = value;
					this.SendPropertyChanged("RefillAmountId");
					this.OnRefillAmountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RefillAmount_PresciptionRefill", Storage="_PresciptionRefills", ThisKey="RefillAmountId", OtherKey="RefillAmountId")]
		public EntitySet<PresciptionRefill> PresciptionRefills
		{
			get
			{
				return this._PresciptionRefills;
			}
			set
			{
				this._PresciptionRefills.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PresciptionRefills(PresciptionRefill entity)
		{
			this.SendPropertyChanging();
			entity.RefillAmount = this;
		}
		
		private void detach_PresciptionRefills(PresciptionRefill entity)
		{
			this.SendPropertyChanging();
			entity.RefillAmount = null;
		}
	}
}
#pragma warning restore 1591
